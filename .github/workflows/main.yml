name: Build and Deploy to Azure Container App

on:
  push:
    branches:
      - main

env:
  REGISTRY_NAME: ${{ secrets.REGISTRY_NAME }}
  RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
  CONTAINER_APP_NAME: ${{ secrets.CONTAINER_APP_NAME }}
  IMAGE_NAME: ${{ secrets.AZURE_IMAGE_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.REGISTRY_NAME }}.azurecr.io

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout full repo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures all files (including Dockerfile) are available

      # Step 2: Login to Azure
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 3: Login to Azure Container Registry
      - name: Log in to Azure Container Registry
        run: az acr login --name ${{ env.REGISTRY_NAME }}

      # Step 4: Install dependencies and build frontend (disable ESLint CI fails)
      - name: Build Frontend (React)
        run: |
          echo "üîß Installing dependencies..."
          npm ci
          echo "üèóÔ∏è Building frontend (ignoring lint warnings)..."
          CI=false npm run build

      # Step 5: Debug file structure
      - name: Debug workspace
        run: |
          echo "üè† GitHub workspace: $GITHUB_WORKSPACE"
          echo "üìÇ Listing all files under workspace:"
          ls -R $GITHUB_WORKSPACE

      # Step 6: Build and Push Docker image
      - name: Build and Push Docker image
        working-directory: ${{ github.workspace }}
        run: |
          echo "üèóÔ∏è Working directory: $(pwd)"
          echo "üìÑ Files in working directory:"
          ls -la
          echo "üöÄ Building Docker image..."
          docker build -f Dockerfile -t $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker tag $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ github.sha }} $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest
          echo "üì§ Pushing image to Azure Container Registry..."
          docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest

      # Step 7: Deploy latest image to Azure Container App
      - name: Deploy to Azure Container App
        run: |
          echo "üöÄ Deploying image to Azure Container App..."
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest \
            --query properties.configuration.ingress.fqdn
