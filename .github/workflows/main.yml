name: Build and Deploy to Azure Container App

on:
  push:
    branches:
      - main

env:
  ACR_NAME: frontendacr01
  ACR_LOGIN_SERVER: frontendacr01.azurecr.io
  ACR_RESOURCE_GROUP: frontend_rg
  APP_RESOURCE_GROUP: DefaultResourceGroup-CID
  CONTAINER_APP_NAME: frontend-app
  IMAGE_NAME: frontend-code

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: üßæ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Log in to Azure using Service Principal
      - name: üîê Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 3: Log in to ACR
      - name: üóùÔ∏è Log in to Azure Container Registry
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      # Step 4: Install dependencies and build React app
      - name: ‚öôÔ∏è Install dependencies and build
        run: |
          echo "üîß Installing dependencies..."
          npm ci
          echo "üèóÔ∏è Building production build..."
          CI=false npm run build   # Prevent ESLint warnings from breaking CI build

      # Step 5: Debug workspace (optional for troubleshooting)
      - name: üß© Debug workspace
        run: |
          echo "üèóÔ∏è Working directory: $(pwd)"
          echo "üìÇ Files available:"
          ls -la

      # Step 6: Build and push Docker image to ACR
      - name: üê≥ Build and push Docker image to ACR
        run: |
          IMAGE_TAG=${{ github.sha }}
          echo "üöÄ Building Docker image..."
          docker build -t $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:$IMAGE_TAG .
          docker tag $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:$IMAGE_TAG $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest
          echo "üì§ Pushing image to ACR..."
          docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:$IMAGE_TAG
          docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest

      # Step 7: Ensure container app exists before updating
      - name: üîé Check if Container App exists
        id: check-app
        run: |
          echo "üîç Checking if the container app '${{ env.CONTAINER_APP_NAME }}' exists..."
          if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group "${{ env.APP_RESOURCE_GROUP }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Container app found."
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Container app not found."
          fi

      # Step 8: Deploy or create the Container App
      - name: üöÄ Deploy or Create Azure Container App
        run: |
          if [ "${{ steps.check-app.outputs.exists }}" = "true" ]; then
            echo "üöÄ Updating existing Container App..."
            az containerapp update \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group "${{ env.APP_RESOURCE_GROUP }}" \
              --image $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest \
              --query properties.configuration.ingress.fqdn
          else
            echo "üÜï Creating new Container App..."
            ENV_NAME="frontend-env"
            az containerapp env list --resource-group "${{ env.APP_RESOURCE_GROUP }}" --query "[0].name" -o tsv || az containerapp env create \
              --name $ENV_NAME \
              --resource-group "${{ env.APP_RESOURCE_GROUP }}" \
              --location westus
            az containerapp create \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group "${{ env.APP_RESOURCE_GROUP }}" \
              --environment $ENV_NAME \
              --image $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest \
              --target-port 80 \
              --ingress external \
              --registry-server $ACR_LOGIN_SERVER
          fi

      # Step 9: Verify Deployment
      - name: üåê Verify Deployment
        run: |
          echo "üåç Checking if the app is live..."
          APP_URL=$(az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group "${{ env.APP_RESOURCE_GROUP }}" \
            --query properties.configuration.ingress.fqdn -o tsv)
          echo "‚úÖ App deployed at: https://$APP_URL"
